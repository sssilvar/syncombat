"""
=======================
Biasing submodule following the ComBat model formulation
=======================

This submodule contains the implementation of the ComBat model for batch effect induction. The combat formulation
supposes that the data is generated by a mean effect model with a random intercept and a multiplicative
variance factor for each batch.
"""
import torch

from ..covariates.generation import CovariateGenerator
from ..phenotypes.models import PhenotypeModel


class ComBatBiaser:
    """An abstract class for batch effect induction using the ComBat model."""

    def __init__(self, cov_gen: CovariateGenerator, pheno_gen: PhenotypeModel, random_state=42):
        """Abstract class for batch effect induction using the ComBat model.

        Args:
            cov_gen (CovariateGenerator): Covariate generator.
            pheno_gen (PhenotypeModel): Phenotype generator.
            random_state (int): Random seed.
        """
        # Save params
        self.cov_gen = cov_gen
        self.pheno_gen = pheno_gen
        self.random_state = random_state

        # Assert generators are compatible by checking the length of their generated data
        assert len(self.cov_gen.dataframe) == len(self.pheno_gen.dataframe), \
            "The covariate and phenotype generators must be compatible (same length)."

        # Set seed
        torch.manual_seed(self.random_state)

        # TODO:
        #  - Add random effects and compute fixed effect from the utilization of the design matrix
        #  - Set priors on random intercept: gamma_ig
        #  - Set priors on random variance shape: delta_ig

